<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SmileXin</title>
  
  <subtitle>SmileXin的博客小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="clausclaus.github.io/"/>
  <updated>2019-10-02T16:17:54.149Z</updated>
  <id>clausclaus.github.io/</id>
  
  <author>
    <name>SmileXin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="clausclaus.github.io/2019/10/03/hello-world/"/>
    <id>clausclaus.github.io/2019/10/03/hello-world/</id>
    <published>2019-10-02T16:17:54.149Z</published>
    <updated>2019-10-02T16:17:54.149Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Kylin构建以及运行</title>
    <link href="clausclaus.github.io/2019/10/02/Kylin%E6%9E%84%E5%BB%BA%E4%BB%A5%E5%8F%8A%E8%BF%90%E8%A1%8C/"/>
    <id>clausclaus.github.io/2019/10/02/Kylin构建以及运行/</id>
    <published>2019-10-02T08:44:56.000Z</published>
    <updated>2019-10-02T16:20:14.209Z</updated>
    
    <content type="html"><![CDATA[<ol><li><p>下载 Kylin 源码包： <a href="https://github.com/apache/kylin/archive/kylin-3.0.0-beta.tar.gz" target="_blank" rel="noopener">https://github.com/apache/kylin/archive/kylin-3.0.0-beta.tar.gz</a></p></li><li><p>终端执行 <code>tar -zxvf kylin-kylin-3.0.0-beta.tar.gz</code>对源码进行解压缩</p></li><li><p>执行<code>cd kylin-kylin-3.0.0-beta/docker &amp;&amp; sh build_image.sh</code>进入镜像文件并开始构建镜像，时间取决于网络，此次构建执行打包出 docker 镜像，但并没有运行起来</p></li><li><p>镜像构建成功后继续在 docker 目录下执行 <code>sh run_container.sh</code>将镜像运行起来</p></li><li><p>执行 <code>sudo docker ps</code>查看正在运行的容器并复制 CONTAINER ID</p></li><li><p>执行 <code>sudo docker exec -it &lt;CONTAINER ID&gt; /bin/bash</code>进入容器，至此，kylin 所需要的运行环境就搭建起来了</p></li><li><p>kylin 源码存放于<code>/home/admin/kylin_sourcecode</code>目录下，<code>cd /home/admin/kylin_sourcecod</code>进入该目录并执行<code>build/script/package.sh</code>开始对 kylin 进行打包构建</p></li><li><p>对后端运行所需依赖包 maven 使用了 aliyun 镜像，下载速度相对可观。遇到个坑一直提示缺包，解决方式是关掉本机的 VPN 并在容器中执行<code>cd ~/ &amp;&amp; rm -rf .m2/</code>将.m2 文件夹删除掉。</p></li><li><p>在 kylin_sourcecode 根目录下执行<code>mvn clean install -DskipTests</code>单独将 kylin 依赖的 jar 包下载下来，如果在这里出错并且是类似<code>Execution enforce-maven-version&lt;enforce-maven-version是缺失的包&gt; of goal org.apache.maven.plugins:maven-checkstyle-plugin:2.17:check failed</code>这样的错误，则重复上面的步骤 8。我这里多执行几次之后就全部下载成功了</p></li><li><p>重新执行<code>build/script/package.sh</code> 脚本构建 kylin，此时 maven 会优先去读取缓存，也就是步骤 9 中已下载好的包，后端依赖下载完成后会下载前端依赖。下载前端依赖时如果遇到一些 npm 包下载失败的情况，解决方式是把 VPN 的全局模式开起来或者执行<code>npm --registry https://registry.npm.taobao.org</code>使得 npm 使用淘宝镜像源下载前端依赖</p></li><li><p><code>package.sh</code>脚本中配置了整个 kylin 前后端的相关依赖，下载完成后会对相关代码进行打包压缩，主要问题还是集中在步骤 9、10 这里。最终，在项目的根目录下会生成一个 dist 文件，里面存放着压缩好的 kylin tar 包</p></li><li><p>你可以将 kylin 的 tar 包放到任意位置进行解压运行，前提是你的运行环境已经搭建好了。这里我使用<code>cp /home/admin/kylin_sourcecode/dist/&lt;tar包名称&gt; /home/admin</code> 将压缩包复制到 admin 目录下，并执行<code>tar -zxvf &lt;tar包名称&gt;</code>对 tar 包进行解压，cd 到解压好的包中并执行<code>bin/kylin.sh start</code>将 kylin 运行起来</p></li><li><p>此时可以尝试访问浏览器的<code>localhost:7070/kylin</code> ，如果不出意外的话就可以看到 kylin 的登录界面了，出错的话看下命令行输出或者查看日志然后谷歌去吧、kylin 的构建运行简直一把辛酸泪。。。<br><img src="https://smilexin.oss-cn-shenzhen.aliyuncs.com/WechatIMG235.jpeg" alt></p></li><li>用户名：ADMIN，密码：KYLIN</li></ol><p>Tips:</p><ul><li>想要停止运行的话可以在构建好的 kylin 目录下执行 <code>bin/kylin.sh stop</code> 将 kylin 停止</li><li>可以执行 <code>bin/sample.sh</code> 加载 kylin 示例，执行完毕后在命令行有提示说重启 kylin 或者去到浏览器界面点击 system tab 页并点击 reload metadata 按钮重新加载元数据，这里显然是点击 reload metadata 按钮方便些<br><img src="https://smilexin.oss-cn-shenzhen.aliyuncs.com/6e3e5b9bgy1ffarwrur99g208c08cb0c.gif" alt></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;&lt;p&gt;下载 Kylin 源码包： &lt;a href=&quot;https://github.com/apache/kylin/archive/kylin-3.0.0-beta.tar.gz&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://g
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Vue lifecycle</title>
    <link href="clausclaus.github.io/2018/08/04/Vue-lifecycle/"/>
    <id>clausclaus.github.io/2018/08/04/Vue-lifecycle/</id>
    <published>2018-08-04T08:57:07.000Z</published>
    <updated>2019-10-02T16:17:54.148Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#root'</span>,</span><br><span class="line">  template: <span class="string">'&lt;div&gt;&#123;&#123;text&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    text: <span class="string">'this is Vue lifecycle'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// vue开始实例化的时候执行</span></span><br><span class="line">  beforeCreate () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'beforeCreate'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// vue实例化完毕</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'created'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// vue实例开始挂载</span></span><br><span class="line">  beforeMount () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'beforeMount'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// vue实例挂载完毕</span></span><br><span class="line">  mounted () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'mounted'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// vue实例数据发生变化， 更新数据</span></span><br><span class="line">  beforeUpdate () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'beforeUpdate'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// vue实例更新完毕</span></span><br><span class="line">  updated () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'updated'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// keep-alive 组件激活时调用</span></span><br><span class="line">  activated () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'activated'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// keep-alive 组件停用时调用</span></span><br><span class="line">  deactivated () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'deactivated'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// vue实例开始被销毁</span></span><br><span class="line">  beforeDestroy () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'beforeDestroy'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// vue实例销毁完毕</span></span><br><span class="line">  destroyed () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'destroyed'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 当捕获一个来自子孙组件的错误时被调用</span></span><br><span class="line">  errorCaptured () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>, <span class="string">'errorCaptured'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
